{"pageTitle":"SpringBoot3 整合 Logback 日志框架3 - SpringBoot","title":"SpringBoot3 整合 Logback 日志框架3","keyword":"logback3","content":"<p><br></p>\r\n<div class=\"code-toolbar\">\r\n    <pre class=\"line-numbers\"><code class=\"language-js\" data-prismjs-copy=\"Copy\">/*弹出对话框通用函数*/\r\nfunction showPublicConfirm(e, callback, message) {\r\n    //1 通用确认对话框位置确定\r\n    //在当前单击位置的右边显示\r\n    let left = e.clientX + 10;\r\n    let top = e.clientY + 10;\r\n    //判断不要越界(因为确定按钮和关闭按钮都在右侧,所以判断右边不要越界);\r\n    let windowWidth = getScrollDocumentWidth();\r\n    if (left + this.offsetWidth &gt; windowWidth) {\r\n        left = windowWidth - this.offsetWidth;\r\n    }\r\n    publicConfirmTipContent.style.left = left + 'px';\r\n    publicConfirmTipContent.style.top = top + 'px';\r\n    publicConfirmTipContent.style.position = 'absolute';\r\n    //2 通用对话框的内容确定\r\n    publicConfirmTooltip.innerHTML = message;\r\n    //3 显示对话框\r\n    publicConfirmTip.style.display = \"block\";\r\n\r\n    publicConfirmTipButtonConfirm.onclick = function () {\r\n        callback(e);\r\n        publicConfirmTip.style.display = 'none';\r\n    }\r\n    publicConfirmTipButtonCancel.onclick = function () {\r\n        publicConfirmTip.style.display = 'none';\r\n    }\r\n}\r\n\r\nfunction getScrollDocumentWidth() {\r\n    return Math.max(\r\n        document.documentElement.scrollWidth,\r\n        document.documentElement.offsetWidth,\r\n        document.documentElement.clientWidth,\r\n        document.body.scrollWidth,\r\n        document.body.offsetWidth,\r\n        document.body.clientWidth,\r\n    );\r\n}\r\n\r\nfunction getScrollDocumentHeight() {\r\n    return Math.max(\r\n        document.documentElement.scrollHeight,\r\n        document.documentElement.offsetHeight,\r\n        document.documentElement.clientHeight,\r\n        document.body.scrollHeight,\r\n        document.body.offsetHeight,\r\n        document.body.clientHeight,\r\n    );\r\n}\r\n\r\n//对于输入变动事件的函数进行包装,防抖动功能,避免请求太频繁\r\nfunction debounce(f, timeout) {\r\n    let timerId;\r\n    return function () {\r\n        clearTimeout(timerId); //立刻清除上次timer\r\n        timerId = setTimeout(() =&gt; {\r\n            f.apply(this, arguments);\r\n        }, timeout);\r\n    };\r\n}\r\n\r\nfunction randomInteger(min, max) { //产生随机整数\r\n    return Math.floor(min + Math.random() * (max - min + 1));\r\n}\r\n\r\nfunction randomInteger(n) { //产生随机整数\r\n    return Math.floor(Math.random() * n);\r\n}\r\n\r\n/*加载jodit editor编辑器插件- free version*/\r\nfunction loadJoditEditor(selector) {\r\n    return Jodit.make(selector, {\r\n        pasteCode: {\r\n            defaultLanguage: 'js',\r\n            languages: Jodit.atom([\r\n                {value: 'js', text: 'JavaScript'},\r\n                {value: 'html', text: 'HTML/XML'},\r\n                {value: 'markup', text: 'Markup'},\r\n                {value: 'svg', text: 'Svg'},\r\n                {value: 'css', text: 'CSS'},\r\n                {value: 'C-like', text: 'C-like'},\r\n                {value: 'c', text: 'C'},\r\n                {value: 'cpp', text: 'C++'},\r\n                {value: 'csharp', text: 'C#'},\r\n                {value: 'Git', text: 'Git'},\r\n                {value: 'bash', text: 'Bash'},\r\n                {value: 'java', text: 'Java'},\r\n                {value: 'Gradle', text: 'Gradle'},\r\n                {value: 'yaml', text: 'YAML'},\r\n                {value: 'python', text: 'Python'},\r\n                {value: 'ruby', text: 'Ruby'},\r\n                {value: 'typescript', text: 'TypeScript'},\r\n                {value: 'php', text: 'Php'},\r\n                {value: 'JSON5', text: 'JSON5'},\r\n                {value: 'sql', text: 'SQL'},\r\n                {value: 'regex', text: 'Regex'},\r\n                {value: 'batch', text: 'Batch'},\r\n                {value: 'docker', text: 'Docker'}\r\n            ]),\r\n            insertTemplate: (_, lang, value) =&gt; `\r\n${value}\r\n`,\r\n            dialog: {\r\n                width: 1000\r\n            }\r\n        },\r\n        uploader: {\r\n            url: '/article/uploadFile',\r\n            format: 'json',\r\n            getMessage: function (resp) {\r\n                if (resp.statusText === 'ok') {\r\n                    resp.data.fileNames.forEach(fileName =&gt; {\r\n                        this.jodit.selection.insertImage(resp.data.baseurl + resp.data.path + fileName);\r\n                    });\r\n                }\r\n                return resp.msg;\r\n            }\r\n        },\r\n        controls: {\r\n            lineHeight: {\r\n                list: Jodit.atom([1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 3, 3.5])\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/*分页脚本-------start*/\r\nfunction renderPageParams() {\r\n    //初始化分页参数\r\n    pageParams.currentPage = document.getElementById(\"currentPage\").value; //当前页,默认页面加载时为1\r\n    pageParams.startPage = 1; //当前页导航第一页,默认页面加载时为1\r\n    pageParams.endPage = 5; //当前页导航最后一页,默认\r\n    pageParams.toPage = 1; //要跳转的页,默认\r\n    pageParams.total = parseInt(document.getElementById(\"total\").value); //数据量\r\n    pageParams.pageSize = parseInt(document.getElementById(\"pageSize\").value); //单页数据量\r\n    pageParams.pageBarNum = parseInt(document.getElementById(\"pageBarNum\").value);\r\n    //开始渲染\r\n    renderPage();\r\n}\r\n\r\n/*\r\n    分页渲染逻辑\r\n        1 假设开始页==1,分页为 1 2 3 4 5,在点击到中位数3之后才开始渲染\r\n        2 假设结束页是13最后一页,分页位 9 10 11 12 13,在点击到中位数11之前才开始渲染\r\n        其它情况:让点击的页数居中,依次展开页数\r\n*/\r\nfunction renderPage() {\r\n    //计算开始和结束页\r\n    calcPage();\r\n    //刷新页面\r\n    renderPageBar();\r\n    //改变按钮显示\r\n    showButton();\r\n    //改变导航显示\r\n    setPageBarNumber();\r\n}\r\n\r\n//计算开始页和结束页\r\nfunction calcPage() {\r\n    //总页数\r\n    let totalPage = Math.ceil(pageParams.total / pageParams.pageSize);\r\n\r\n    //开始页和结束页计算得当之后就可以渲染页面了.\r\n    let calcStartPage, calcEndPage;\r\n    //如果总页数小于pageBarNum,未撑满\r\n    if (totalPage &lt;= pageParams.pageBarNum) {\r\n        calcStartPage = 1;\r\n        calcEndPage = totalPage;\r\n    } else {\r\n        //计算开始页数的中位数,得出开始startPage页\r\n        let middlePage = Math.ceil((1 + pageParams.pageBarNum) / 2);\r\n        if (pageParams.startPage === 1 &amp;&amp; pageParams.toPage &lt; middlePage) {\r\n            calcStartPage = 1;\r\n        } else {\r\n            middlePage = Math.ceil((pageParams.startPage + pageParams.endPage) / 2);\r\n            //计算要去的页和现在的中位数的差距,调整开始页码\r\n            calcStartPage = pageParams.startPage + (pageParams.toPage - middlePage);\r\n        }\r\n        //防止越界\r\n        if (calcStartPage &lt; 1) calcStartPage = 1;\r\n        calcEndPage = calcStartPage + pageParams.pageBarNum - 1; //计算的结束页\r\n        //如果由开始页计算的结束页超过最大页totalPage,则需要重新计算开始页\r\n        if (calcEndPage &gt; totalPage) {\r\n            calcEndPage = totalPage;\r\n            calcStartPage = calcEndPage - pageParams.pageBarNum + 1;\r\n        }\r\n    }\r\n    pageParams.startPage = calcStartPage;\r\n    pageParams.endPage = calcEndPage;\r\n}\r\n\r\n//刷新freshPageBar页面\r\nfunction renderPageBar() {\r\n    //操作page的dom\r\n    let pageIndex = document.body.querySelector(\".pageIndex\");\r\n    pageIndex.innerHTML = \"\";\r\n    for (let i = pageParams.startPage; i &lt;= pageParams.endPage; i++) {\r\n        if (i !== pageParams.toPage) {\r\n            pageIndex.innerHTML += \"\" + i + \"\";\r\n        } else {\r\n            pageIndex.innerHTML += \"\" + i + \"\";\r\n            pageParams.currentPage = i; //确定当前页\r\n        }\r\n    }\r\n}\r\n\r\n//控制显示分页button\r\nfunction showButton() {\r\n    let totalPage = Math.ceil(pageParams.total / pageParams.pageSize);\r\n    let pagePrev = document.getElementById(\"pagePrev\");\r\n    let pageNext = document.getElementById(\"pageNext\");\r\n    if ((pageParams.currentPage === 1 &amp;&amp; totalPage &gt; 0) || totalPage === 0) {\r\n        pagePrev.style.display = 'none'\r\n    } else {\r\n        pagePrev.style.display = 'block';\r\n    }\r\n    pageParams.currentPage &lt; totalPage ? pageNext.style.display = 'block' : pageNext.style.display = 'none';\r\n}\r\n\r\n//分页单击事件\r\nfunction renderClickPage(e) {\r\n    let clickElem = e.target;\r\n    if (clickElem.id === \"pagePrev\") {\r\n        pageParams.toPage = pageParams.currentPage - 1;\r\n    } else if (clickElem.id === \"pageNext\") {\r\n        pageParams.toPage = pageParams.currentPage + 1;\r\n    } else if (clickElem.className !== \"pageSelected\") {\r\n        //先清除pageSelected\r\n        document.body.querySelector(\".pageSelected\").removeAttribute(\"class\");\r\n        clickElem.className = \"pageSelected\";\r\n        pageParams.toPage = parseInt(clickElem.textContent);\r\n    }\r\n    renderPage();\r\n}\r\n\r\n//分页大小调整函数\r\nfunction setPageSize(e) {\r\n    if (e.key === 'Enter') {\r\n        document.getElementById(\"pageSize\").value = e.target.value;\r\n        renderPageParams();\r\n    }\r\n}\r\n\r\n//导航现实的页码数调整\r\nfunction setPageBarNum(e) {\r\n    if (e.key === 'Enter') {\r\n        let totalPage = Math.ceil(pageParams.total / pageParams.pageSize);\r\n        let pageBarNum = parseInt(e.target.value);\r\n        if (pageBarNum &lt; 0 || pageBarNum &gt; totalPage) {\r\n            alert(`页码数应当在1和${totalPage}之间`);\r\n            pageParams.pageBarNum = totalPage;\r\n        } else {\r\n            pageParams.pageBarNum = pageBarNum;\r\n        }\r\n        renderPage();\r\n    }\r\n}\r\n\r\n//跳转页\r\nfunction toPage(event) {\r\n    if (event.key === 'Enter') {\r\n        let totalPage = Math.ceil(pageParams.total / pageParams.pageSize);\r\n        let toPage = parseInt(event.target.value);\r\n        if (toPage &gt; totalPage) {\r\n            alert(`页码数在1和${totalPage}之间`);\r\n            return;\r\n        }\r\n        pageParams.toPage = toPage;\r\n        renderPage();\r\n    }\r\n}\r\n\r\n//页导航下面数据显示\r\nfunction setPageBarNumber() {\r\n    totalPage.value = Math.ceil(total.value / pageSize.value);\r\n    currentPage.value = pageParams.currentPage;\r\n    pageBarNum.value = pageParams.pageBarNum;\r\n}\r\n\r\n/*分页脚本-------end*/\r\n\r\n//渲染错误form表单验证错误信息\r\nfunction renderFormFieldErrors(form, errors) {\r\n    for (let key in errors) {\r\n        if (form.elements[key]) {\r\n            if (form.elements[key].nextElementSibling &amp;&amp; form.elements[key].nextElementSibling.classList.contains('feildErr')) {\r\n                form.elements[key].nextElementSibling.innerHTML = errors[key];\r\n            } else {\r\n                form.elements[key].insertAdjacentHTML('afterend', `${errors[key]}`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//清除form表单验证错误信息\r\nfunction clearFormFieldErrors(form) {\r\n    Array.from(form.querySelectorAll(\".feildErr\")).forEach(e =&gt; {\r\n        e.remove();\r\n    });\r\n}\r\n\r\n//判断页面给导航着色\r\nwindow.addEventListener(\"load\", () =&gt; {\r\n    let url = window.location.href;\r\n    let color = \"#03AA6D\";\r\n    if (url.includes('/subject')) {\r\n        document.getElementById(\"subjectNav\").style.color = color;\r\n    }\r\n    if (url.includes('/article')) {\r\n        document.getElementById(\"articleNav\").style.color = color;\r\n    }\r\n    if (url.includes('/navigation')) {\r\n        document.getElementById(\"navigationNav\").style.color = color;\r\n    }\r\n});\r\n\r\n//页面缩略鼠标事件,显示大图\r\nfunction previewBigImg(target) {\r\n    let img = document.getElementById(\"previewBigImg\");\r\n    let coords = target.getBoundingClientRect();\r\n    img.src = target.src;\r\n    img.style.display = \"block\";\r\n    img.style.top = coords.top - img.offsetWidth + \"px\";\r\n    img.style.left = coords.left + target.offsetHeight + \"px\";\r\n}\r\n\r\nfunction previewImg(target) {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsDataURL(target.files[0]);\r\n    fileReader.onload = function (e) {\r\n        if (target.nextElementSibling) target.nextElementSibling.remove();\r\n        const img = document.createElement(\"img\");\r\n        img.src = e.target.result;\r\n        img.style.width = '40px';\r\n        img.style.height = '40px';\r\n        img.style.backgroundColor = '#F2F2F2';\r\n        img.style.verticalAlign = \"middle\";\r\n        img.style.marginLeft = '10px';\r\n        target.insertAdjacentElement(\"afterend\", img);\r\n    }\r\n}\r\n\r\nasync function checkEnName(type, target, url) {\r\n    let value = target.value ? target.value.trim() : null;\r\n    if (!value) {\r\n        if (target.nextElementSibling &amp;&amp; target.nextElementSibling.classList.contains('feildErr')) {\r\n            target.nextElementSibling.innerHTML = `不能为空`;\r\n        } else {\r\n            target.insertAdjacentHTML(\"afterend\", \"不能为空\");\r\n        }\r\n        return false;\r\n    }\r\n    let formData = new FormData();\r\n    formData.set(\"enName\", value);\r\n    let response = await fetch(url, {method: 'POST', body: formData});\r\n    let result = await response.json();\r\n    if (result.statusText === 'ok') {\r\n        if (target.nextElementSibling &amp;&amp; target.nextElementSibling.classList.contains('feildErr')) {\r\n            target.nextElementSibling.innerHTML = '';\r\n        }\r\n        return true;\r\n    } else {\r\n        let msg = type === 0 ? result.data.subjectTitle : result.data.title;\r\n        if (target.nextElementSibling &amp;&amp; target.nextElementSibling.classList.contains('feildErr')) {\r\n            target.nextElementSibling.innerHTML = `存在同名条目:${msg}`;\r\n        } else {\r\n            target.insertAdjacentHTML(\"afterend\", `存在同名条目:${msg}`);\r\n        }\r\n        return false;\r\n    }\r\n}</code></pre><pre class=\"line-numbers\"><code class=\"language-js\" data-prismjs-copy=\"Copy\">/*弹出对话框通用函数*/\r\nfunction showPublicConfirm(e, callback, message) {\r\n    //1 通用确认对话框位置确定\r\n    //在当前单击位置的右边显示\r\n    let left = e.clientX + 10;\r\n    let top = e.clientY + 10;\r\n    //判断不要越界(因为确定按钮和关闭按钮都在右侧,所以判断右边不要越界);\r\n    let windowWidth = getScrollDocumentWidth();\r\n    if (left + this.offsetWidth &gt; windowWidth) {\r\n        left = windowWidth - this.offsetWidth;\r\n    }\r\n    publicConfirmTipContent.style.left = left + 'px';\r\n    publicConfirmTipContent.style.top = top + 'px';\r\n    publicConfirmTipContent.style.position = 'absolute';\r\n    //2 通用对话框的内容确定\r\n    publicConfirmTooltip.innerHTML = message;\r\n    //3 显示对话框\r\n    publicConfirmTip.style.display = \"block\";\r\n\r\n    publicConfirmTipButtonConfirm.onclick = function () {\r\n        callback(e);\r\n        publicConfirmTip.style.display = 'none';\r\n    }\r\n    publicConfirmTipButtonCancel.onclick = function () {\r\n        publicConfirmTip.style.display = 'none';\r\n    }\r\n}\r\n\r\nfunction getScrollDocumentWidth() {\r\n    return Math.max(\r\n        document.documentElement.scrollWidth,\r\n        document.documentElement.offsetWidth,\r\n        document.documentElement.clientWidth,\r\n        document.body.scrollWidth,\r\n        document.body.offsetWidth,\r\n        document.body.clientWidth,\r\n    );\r\n}\r\n\r\nfunction getScrollDocumentHeight() {\r\n    return Math.max(\r\n        document.documentElement.scrollHeight,\r\n        document.documentElement.offsetHeight,\r\n        document.documentElement.clientHeight,\r\n        document.body.scrollHeight,\r\n        document.body.offsetHeight,\r\n        document.body.clientHeight,\r\n    );\r\n}\r\n\r\n//对于输入变动事件的函数进行包装,防抖动功能,避免请求太频繁\r\nfunction debounce(f, timeout) {\r\n    let timerId;\r\n    return function () {\r\n        clearTimeout(timerId); //立刻清除上次timer\r\n        timerId = setTimeout(() =&gt; {\r\n            f.apply(this, arguments);\r\n        }, timeout);\r\n    };\r\n}\r\n\r\nfunction randomInteger(min, max) { //产生随机整数\r\n    return Math.floor(min + Math.random() * (max - min + 1));\r\n}\r\n\r\nfunction randomInteger(n) { //产生随机整数\r\n    return Math.floor(Math.random() * n);\r\n}\r\n\r\n/*加载jodit editor编辑器插件- free version*/\r\nfunction loadJoditEditor(selector) {\r\n    return Jodit.make(selector, {\r\n        pasteCode: {\r\n            defaultLanguage: 'js',\r\n            languages: Jodit.atom([\r\n                {value: 'js', text: 'JavaScript'},\r\n                {value: 'html', text: 'HTML/XML'},\r\n                {value: 'markup', text: 'Markup'},\r\n                {value: 'svg', text: 'Svg'},\r\n                {value: 'css', text: 'CSS'},\r\n                {value: 'C-like', text: 'C-like'},\r\n                {value: 'c', text: 'C'},\r\n                {value: 'cpp', text: 'C++'},\r\n                {value: 'csharp', text: 'C#'},\r\n                {value: 'Git', text: 'Git'},\r\n                {value: 'bash', text: 'Bash'},\r\n                {value: 'java', text: 'Java'},\r\n                {value: 'Gradle', text: 'Gradle'},\r\n                {value: 'yaml', text: 'YAML'},\r\n                {value: 'python', text: 'Python'},\r\n                {value: 'ruby', text: 'Ruby'},\r\n                {value: 'typescript', text: 'TypeScript'},\r\n                {value: 'php', text: 'Php'},\r\n                {value: 'JSON5', text: 'JSON5'},\r\n                {value: 'sql', text: 'SQL'},\r\n                {value: 'regex', text: 'Regex'},\r\n                {value: 'batch', text: 'Batch'},\r\n                {value: 'docker', text: 'Docker'}\r\n            ]),\r\n            insertTemplate: (_, lang, value) =&gt; `${value}`,\r\n            dialog: {\r\n                width: 1000\r\n            }\r\n        },\r\n        uploader: {\r\n            url: '/article/uploadFile',\r\n            format: 'json',\r\n            getMessage: function (resp) {\r\n                if (resp.statusText === 'ok') {\r\n                    resp.data.fileNames.forEach(fileName =&gt; {\r\n                        this.jodit.selection.insertImage(resp.data.baseurl + resp.data.path + fileName);\r\n                    });\r\n                }\r\n                return resp.msg;\r\n            }\r\n        },\r\n        controls: {\r\n            lineHeight: {\r\n                list: Jodit.atom([1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 3, 3.5])\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/*分页脚本-------start*/\r\nfunction renderPageParams() {\r\n    //初始化分页参数\r\n    pageParams.currentPage = document.getElementById(\"currentPage\").value; //当前页,默认页面加载时为1\r\n    pageParams.startPage = 1; //当前页导航第一页,默认页面加载时为1\r\n    pageParams.endPage = 5; //当前页导航最后一页,默认\r\n    pageParams.toPage = 1; //要跳转的页,默认\r\n    pageParams.total = parseInt(document.getElementById(\"total\").value); //数据量\r\n    pageParams.pageSize = parseInt(document.getElementById(\"pageSize\").value); //单页数据量\r\n    pageParams.pageBarNum = parseInt(document.getElementById(\"pageBarNum\").value);\r\n    //开始渲染\r\n    renderPage();\r\n}\r\n\r\n/*\r\n    分页渲染逻辑\r\n        1 假设开始页==1,分页为 1 2 3 4 5,在点击到中位数3之后才开始渲染\r\n        2 假设结束页是13最后一页,分页位 9 10 11 12 13,在点击到中位数11之前才开始渲染\r\n        其它情况:让点击的页数居中,依次展开页数\r\n*/\r\nfunction renderPage() {\r\n    //计算开始和结束页\r\n    calcPage();\r\n    //刷新页面\r\n    renderPageBar();\r\n    //改变按钮显示\r\n    showButton();\r\n    //改变导航显示\r\n    setPageBarNumber();\r\n}\r\n\r\n//计算开始页和结束页\r\nfunction calcPage() {\r\n    //总页数\r\n    let totalPage = Math.ceil(pageParams.total / pageParams.pageSize);\r\n\r\n    //开始页和结束页计算得当之后就可以渲染页面了.\r\n    let calcStartPage, calcEndPage;\r\n    //如果总页数小于pageBarNum,未撑满\r\n    if (totalPage &lt;= pageParams.pageBarNum) {\r\n        calcStartPage = 1;\r\n        calcEndPage = totalPage;\r\n    } else {\r\n        //计算开始页数的中位数,得出开始startPage页\r\n        let middlePage = Math.ceil((1 + pageParams.pageBarNum) / 2);\r\n        if (pageParams.startPage === 1 &amp;&amp; pageParams.toPage &lt; middlePage) {\r\n            calcStartPage = 1;\r\n        } else {\r\n            middlePage = Math.ceil((pageParams.startPage + pageParams.endPage) / 2);\r\n            //计算要去的页和现在的中位数的差距,调整开始页码\r\n            calcStartPage = pageParams.startPage + (pageParams.toPage - middlePage);\r\n        }\r\n        //防止越界\r\n        if (calcStartPage &lt; 1) calcStartPage = 1;\r\n        calcEndPage = calcStartPage + pageParams.pageBarNum - 1; //计算的结束页\r\n        //如果由开始页计算的结束页超过最大页totalPage,则需要重新计算开始页\r\n        if (calcEndPage &gt; totalPage) {\r\n            calcEndPage = totalPage;\r\n            calcStartPage = calcEndPage - pageParams.pageBarNum + 1;\r\n        }\r\n    }\r\n    pageParams.startPage = calcStartPage;\r\n    pageParams.endPage = calcEndPage;\r\n}\r\n\r\n//刷新freshPageBar页面\r\nfunction renderPageBar() {\r\n    //操作page的dom\r\n    let pageIndex = document.body.querySelector(\".pageIndex\");\r\n    pageIndex.innerHTML = \"\";\r\n    for (let i = pageParams.startPage; i &lt;= pageParams.endPage; i++) {\r\n        if (i !== pageParams.toPage) {\r\n            pageIndex.innerHTML += \"\" + i + \"\";\r\n        } else {\r\n            pageIndex.innerHTML += \"\" + i + \"\";\r\n            pageParams.currentPage = i; //确定当前页\r\n        }\r\n    }\r\n}\r\n\r\n//控制显示分页button\r\nfunction showButton() {\r\n    let totalPage = Math.ceil(pageParams.total / pageParams.pageSize);\r\n    let pagePrev = document.getElementById(\"pagePrev\");\r\n    let pageNext = document.getElementById(\"pageNext\");\r\n    if ((pageParams.currentPage === 1 &amp;&amp; totalPage &gt; 0) || totalPage === 0) {\r\n        pagePrev.style.display = 'none'\r\n    } else {\r\n        pagePrev.style.display = 'block';\r\n    }\r\n    pageParams.currentPage &lt; totalPage ? pageNext.style.display = 'block' : pageNext.style.display = 'none';\r\n}\r\n\r\n//分页单击事件\r\nfunction renderClickPage(e) {\r\n    let clickElem = e.target;\r\n    if (clickElem.id === \"pagePrev\") {\r\n        pageParams.toPage = pageParams.currentPage - 1;\r\n    } else if (clickElem.id === \"pageNext\") {\r\n        pageParams.toPage = pageParams.currentPage + 1;\r\n    } else if (clickElem.className !== \"pageSelected\") {\r\n        //先清除pageSelected\r\n        document.body.querySelector(\".pageSelected\").removeAttribute(\"class\");\r\n        clickElem.className = \"pageSelected\";\r\n        pageParams.toPage = parseInt(clickElem.textContent);\r\n    }\r\n    renderPage();\r\n}\r\n\r\n//分页大小调整函数\r\nfunction setPageSize(e) {\r\n    if (e.key === 'Enter') {\r\n        document.getElementById(\"pageSize\").value = e.target.value;\r\n        renderPageParams();\r\n    }\r\n}\r\n\r\n//导航现实的页码数调整\r\nfunction setPageBarNum(e) {\r\n    if (e.key === 'Enter') {\r\n        let totalPage = Math.ceil(pageParams.total / pageParams.pageSize);\r\n        let pageBarNum = parseInt(e.target.value);\r\n        if (pageBarNum &lt; 0 || pageBarNum &gt; totalPage) {\r\n            alert(`页码数应当在1和${totalPage}之间`);\r\n            pageParams.pageBarNum = totalPage;\r\n        } else {\r\n            pageParams.pageBarNum = pageBarNum;\r\n        }\r\n        renderPage();\r\n    }\r\n}\r\n\r\n//跳转页\r\nfunction toPage(event) {\r\n    if (event.key === 'Enter') {\r\n        let totalPage = Math.ceil(pageParams.total / pageParams.pageSize);\r\n        let toPage = parseInt(event.target.value);\r\n        if (toPage &gt; totalPage) {\r\n            alert(`页码数在1和${totalPage}之间`);\r\n            return;\r\n        }\r\n        pageParams.toPage = toPage;\r\n        renderPage();\r\n    }\r\n}\r\n\r\n//页导航下面数据显示\r\nfunction setPageBarNumber() {\r\n    totalPage.value = Math.ceil(total.value / pageSize.value);\r\n    currentPage.value = pageParams.currentPage;\r\n    pageBarNum.value = pageParams.pageBarNum;\r\n}\r\n\r\n/*分页脚本-------end*/\r\n\r\n//渲染错误form表单验证错误信息\r\nfunction renderFormFieldErrors(form, errors) {\r\n    for (let key in errors) {\r\n        if (form.elements[key]) {\r\n            if (form.elements[key].nextElementSibling &amp;&amp; form.elements[key].nextElementSibling.classList.contains('feildErr')) {\r\n                form.elements[key].nextElementSibling.innerHTML = errors[key];\r\n            } else {\r\n                form.elements[key].insertAdjacentHTML('afterend', `${errors[key]}`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//清除form表单验证错误信息\r\nfunction clearFormFieldErrors(form) {\r\n    Array.from(form.querySelectorAll(\".feildErr\")).forEach(e =&gt; {\r\n        e.remove();\r\n    });\r\n}\r\n\r\n//判断页面给导航着色\r\nwindow.addEventListener(\"load\", () =&gt; {\r\n    let url = window.location.href;\r\n    let color = \"#03AA6D\";\r\n    if (url.includes('/subject')) {\r\n        document.getElementById(\"subjectNav\").style.color = color;\r\n    }\r\n    if (url.includes('/article')) {\r\n        document.getElementById(\"articleNav\").style.color = color;\r\n    }\r\n    if (url.includes('/navigation')) {\r\n        document.getElementById(\"navigationNav\").style.color = color;\r\n    }\r\n});\r\n\r\n//页面缩略鼠标事件,显示大图\r\nfunction previewBigImg(target) {\r\n    let img = document.getElementById(\"previewBigImg\");\r\n    let coords = target.getBoundingClientRect();\r\n    img.src = target.src;\r\n    img.style.display = \"block\";\r\n    img.style.top = coords.top - img.offsetWidth + \"px\";\r\n    img.style.left = coords.left + target.offsetHeight + \"px\";\r\n}\r\n\r\nfunction previewImg(target) {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsDataURL(target.files[0]);\r\n    fileReader.onload = function (e) {\r\n        if (target.nextElementSibling) target.nextElementSibling.remove();\r\n        const img = document.createElement(\"img\");\r\n        img.src = e.target.result;\r\n        img.style.width = '40px';\r\n        img.style.height = '40px';\r\n        img.style.backgroundColor = '#F2F2F2';\r\n        img.style.verticalAlign = \"middle\";\r\n        img.style.marginLeft = '10px';\r\n        target.insertAdjacentElement(\"afterend\", img);\r\n    }\r\n}\r\n\r\nasync function checkEnName(type, target, url) {\r\n    let value = target.value ? target.value.trim() : null;\r\n    if (!value) {\r\n        if (target.nextElementSibling &amp;&amp; target.nextElementSibling.classList.contains('feildErr')) {\r\n            target.nextElementSibling.innerHTML = `不能为空`;\r\n        } else {\r\n            target.insertAdjacentHTML(\"afterend\", \"不能为空\");\r\n        }\r\n        return false;\r\n    }\r\n    let formData = new FormData();\r\n    formData.set(\"enName\", value);\r\n    let response = await fetch(url, {method: 'POST', body: formData});\r\n    let result = await response.json();\r\n    if (result.statusText === 'ok') {\r\n        if (target.nextElementSibling &amp;&amp; target.nextElementSibling.classList.contains('feildErr')) {\r\n            target.nextElementSibling.innerHTML = '';\r\n        }\r\n        return true;\r\n    } else {\r\n        let msg = type === 0 ? result.data.subjectTitle : result.data.title;\r\n        if (target.nextElementSibling &amp;&amp; target.nextElementSibling.classList.contains('feildErr')) {\r\n            target.nextElementSibling.innerHTML = `存在同名条目:${msg}`;\r\n        } else {\r\n            target.insertAdjacentHTML(\"afterend\", `存在同名条目:${msg}`);\r\n        }\r\n        return false;\r\n    }\r\n}</code></pre>\r\n    <div class=\"toolbar\">\r\n        <div class=\"toolbar-item\"><button class=\"copy-to-clipboard-button\" type=\"button\" data-copy-state=\"copy\"><span>Copy</span></button></div>\r\n    </div>\r\n</div>"}