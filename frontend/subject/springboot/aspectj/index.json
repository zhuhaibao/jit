{"pageTitle":"aspectj如何操作 - SpringBoot","title":"aspectj如何操作","keyword":"spring,springframework,springboot","content":"<p><br></p>\r\n<pre class=\"line-numbers\"><code class=\"language-java\" data-prismjs-copy=\"Copy\">public class AutoDeployProcessor {\r\n\r\n    private DeployService deployService;\r\n    private ArticleService articleService;\r\n    private SubjectService subjectService;\r\n\r\n    @Autowired\r\n    public void setDeployService(DeployService deployService) {\r\n        this.deployService = deployService;\r\n    }\r\n\r\n    @Autowired\r\n    public void setArticleService(ArticleService articleService) {\r\n        this.articleService = articleService;\r\n    }\r\n\r\n    @Autowired\r\n    public void setSubjectService(SubjectService subjectService) {\r\n        this.subjectService = subjectService;\r\n    }\r\n\r\n    @Pointcut(\"execution(* com.jumper.jit.service.impl.DeployServiceImpl.saveAndUpdateSubjectArticleStatus(..))||\" +\r\n            \"execution(* com.jumper.jit.service.impl.DeployServiceImpl.saveAndUpdateSingleStatus(..))\")\r\n    private void saveAndUpdateArticleStatus() {\r\n    }\r\n\r\n    @Pointcut(\"execution(* com.jumper.jit.service.impl.SubjectServiceImpl.moveTo(..))||\" +\r\n            \"execution(* com.jumper.jit.service.impl.SubjectServiceImpl.deleteNavigation(..))||\" +\r\n            \"execution(* com.jumper.jit.service.impl.SubjectServiceImpl.addNavigation(..))\")\r\n    private void updateNavigation() {\r\n    }\r\n\r\n    @Pointcut(\"execution(* com.jumper.jit.service.impl.SubjectServiceImpl.updateSubject(..))\")\r\n    private void updateSubject() {\r\n    }\r\n\r\n    @Pointcut(\"execution(* com.jumper.jit.service.impl.ArticleServiceImpl.delete(..))||\" +\r\n            \"execution(* com.jumper.jit.service.impl.ArticleServiceImpl.updateTitle(..))||\" +\r\n            \"execution(* com.jumper.jit.service.impl.ArticleServiceImpl.updateEnName(..))||\" +\r\n            \"execution(* com.jumper.jit.service.impl.ArticleServiceImpl.moveTo(..))\")\r\n    private void updateArticle() {\r\n    }\r\n\r\n    @Pointcut(\"execution(* com.jumper.jit.service.impl.ArticleServiceImpl.insertNodeAsChild(..))\")\r\n    private void insertNodeAsChild() {\r\n    }\r\n\r\n\r\n    @After(\"saveAndUpdateArticleStatus()\")\r\n    public void deployAfterSaveAndUpdateArticleStatus(JoinPoint point) throws Exception {\r\n        MethodSignature signature = (MethodSignature) point.getSignature();\r\n        Article param = (Article) point.getArgs()[0];\r\n        Article dbArticle = articleService.findById(param.getId());\r\n        log.info(\"{} -&gt;auto deploy current Article[id={},title={}]... \", signature.getName(), param.getId(), param.getTitle());\r\n        if (dbArticle.getSid() != null) {\r\n            deployService.deployCurrentSubjectArticle(param.getId());\r\n        } else {\r\n            deployService.deployCurrentSingle(param.getId());\r\n        }\r\n    }\r\n\r\n\r\n    @After(\"updateNavigation()\")\r\n    public void autoDeployTopNav(JoinPoint point) throws Exception {\r\n        MethodSignature signature = (MethodSignature) point.getSignature();\r\n        //发布主页index\r\n        log.info(\"{} -&gt; auto deploy index.html... \", signature.getName());\r\n        deployService.deployIndex();\r\n    }\r\n\r\n\r\n    @After(\"updateSubject()\")\r\n    public void autoDeploySubject(JoinPoint point) throws Exception {\r\n        MethodSignature signature = (MethodSignature) point.getSignature();\r\n        //发布主页index\r\n        log.info(\"{} -&gt; auto deploy index.html...  \", signature.getName());\r\n        deployService.deployIndex();\r\n        //如果修改了enName,也就是主题存放目录,那么整个主题要重发一遍\r\n        SubjectDTO subject = (SubjectDTO) point.getArgs()[0];\r\n        Subject dbSubject = subjectService.findById(subject.getId());\r\n        if (subject.getEnName() != null) {\r\n            log.info(\"{}: enName changed[{}] -&gt; auto deploy AllSubject[{}]... \", signature.getName(), subject.getEnName(), dbSubject.getSubjectTitle());\r\n            deployService.deployAllSubjectArticle(subject.getId());\r\n        }\r\n    }\r\n\r\n\r\n    @After(\"updateArticle()\")\r\n    public void autoDeploySubjectCauseOfArticleModified(JoinPoint point) throws Exception {\r\n        MethodSignature signature = (MethodSignature) point.getSignature();\r\n        //获取第一个参数id,检查文章状态\r\n        Integer id = (Integer) point.getArgs()[0];\r\n        Article article = articleService.findById(id);\r\n        if (article.getStatus().equals(Article.Status.PUBLISHED.getCode())) {\r\n            if (article.getSid() != null) {\r\n                log.info(\"{}: -&gt;Article[{}] auto deploy AllSubject[{}]... \", id, signature.getName(), article.getSubject().getSubjectTitle());\r\n                deployService.deployAllSubjectArticle(article.getSubject().getId());\r\n            } else {\r\n                log.info(\"{}: -&gt;Article[{}]  auto deploy deployAllSingleArticle... \", id, signature.getName());\r\n                deployService.deployAllSingleArticle();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Around(\"insertNodeAsChild()\")\r\n    public Object autoDeployAfterInsertNode(ProceedingJoinPoint point) throws Throwable {\r\n        Integer articleId = (Integer) point.getArgs()[0];\r\n        Integer targetId = (Integer) point.getArgs()[1];\r\n        boolean isSubject = (boolean) point.getArgs()[2];\r\n        Article article = articleService.findById(articleId);//执行前获取参数\r\n        Object object = point.proceed(point.getArgs());//执行\r\n        //非发布状态直接返回\r\n        if (article.getStatus().compareTo(Article.Status.PUBLISHED.getCode()) &lt; 0) return object;\r\n        //有所属主题则重新发布该主题,否则重新发布单体文章列表\r\n        if (article.getSid() != null) {\r\n            deployService.deployAllSubjectArticle(article.getSid());\r\n        } else {\r\n            deployService.deployAllSingleArticle();\r\n        }\r\n        //获取移动目标的主题\r\n        Integer targetSid;\r\n        if (isSubject) {\r\n            targetSid = targetId;\r\n        } else {\r\n            Article target = articleService.findById(targetId);\r\n            targetSid = target.getSid();\r\n        }\r\n        //如果主题不同,则重发布目标主题\r\n        if (!targetSid.equals(article.getSid())) {\r\n            deployService.deployAllSubjectArticle(targetSid);\r\n        }\r\n        return object;\r\n    }\r\n}</code></pre>"}