export default[{
  "id" : 126,
  "url" : "/subject/springboot/aspectj/index.html",
  "subject" : "SpringBoot",
  "title" : "aspectj如何操作",
  "content" : "package com.jumper.jit.aspect; import com.jumper.jit.dto.SubjectDTO; import com.jumper.jit.model.Article; import com.jumper.jit.model.Subject; import com.jumper.jit.service.ArticleService; import com.jumper.jit.service.DeployService; import com.jumper.jit.service.SubjectService; import lombok.extern.slf4j.Slf4j; import org.aspectj.lang.JoinPoint; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.After; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; import org.aspectj.lang.reflect.MethodSignature; import org.junit.jupiter.api.Order; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; @Aspect @Component @Order(1) @Slf4j public class AutoDeployProcessor { private DeployService deployService; private ArticleService articleService; private SubjectService subjectService; @Autowired public void setDeployService(DeployService deployService) { this.deployService = deployService; } @Autowired public void setArticleService(ArticleService articleService) { this.articleService = articleService; } @Autowired public void setSubjectService(SubjectService subjectService) { this.subjectService = subjectService; } @Pointcut(\"execution(* com.jumper.jit.service.impl.DeployServiceImpl.saveAndUpdateSubjectArticleStatus(..))||\" + \"execution(* com.jumper.jit.service.impl.DeployServiceImpl.saveAndUpdateSingleStatus(..))\") private void saveAndUpdateArticleStatus() { } @Pointcut(\"execution(* com.jumper.jit.service.impl.SubjectServiceImpl.moveTo(..))||\" + \"execution(* com.jumper.jit.service.impl.SubjectServiceImpl.deleteNavigation(..))||\" + \"execution(* com.jumper.jit.service.impl.SubjectServiceImpl.addNavigation(..))\") private void updateNavigation() { } @Pointcut(\"execution(* com.jumper.jit.service.impl.SubjectServiceImpl.updateSubject(..))\") private void updateSubject() { } @Pointcut(\"execution(* com.jumper.jit.service.impl.ArticleServiceImpl.delete(..))||\" + \"execution(* com.jumper.jit.service.impl.ArticleServiceImpl.updateTitle(..))||\" + \"execution(* com.jumper.jit.service.impl.ArticleServiceImpl.updateEnName(..))||\" + \"execution(* com.jumper.jit.service.impl.ArticleServiceImpl.moveTo(..))\") private void updateArticle() { } @Pointcut(\"execution(* com.jumper.jit.service.impl.ArticleServiceImpl.insertNodeAsChild(..))\") private void insertNodeAsChild() { } @After(\"saveAndUpdateArticleStatus()\") public void deployAfterSaveAndUpdateArticleStatus(JoinPoint point) throws Exception { MethodSignature signature = (MethodSignature) point.getSignature(); Article param = (Article) point.getArgs()[0]; Article dbArticle = articleService.findById(param.getId()); log.info(\"{} -&gt;auto deploy current Article[id={},title={}]... \", signature.getName(), param.getId(), param.getTitle()); if (dbArticle.getSid() != null) { deployService.deployCurrentSubjectArticle(param.getId()); } else { deployService.deployCurrentSingle(param.getId()); } } @After(\"updateNavigation()\") public void autoDeployTopNav(JoinPoint point) throws Exception { MethodSignature signature = (MethodSignature) point.getSignature(); //发布主页index log.info(\"{} -&gt; auto deploy index.html... \", signature.getName()); deployService.deployIndex(); } @After(\"updateSubject()\") public void autoDeploySubject(JoinPoint point) throws Exception { MethodSignature signature = (MethodSignature) point.getSignature(); //发布主页index log.info(\"{} -&gt; auto deploy index.html... \", signature.getName()); deployService.deployIndex(); //如果修改了enName,也就是主题存放目录,那么整个主题要重发一遍 SubjectDTO subject = (SubjectDTO) point.getArgs()[0]; Subject dbSubject = subjectService.findById(subject.getId()); if (subject.getEnName() != null) { log.info(\"{}: enName changed[{}] -&gt; auto deploy AllSubject[{}]... \", signature.getName(), subject.getEnName(), dbSubject.getSubjectTitle()); deployService.deployAllSubjectArticle(subject.getId()); } } @After(\"updateArticle()\") public void autoDeploySubjectCauseOfArticleModified(JoinPoint point) throws Exception { MethodSignature signature = (MethodSignature) point.getSignature(); //获取第一个参数id,检查文章状态 Integer id = (Integer) point.getArgs()[0]; Article article = articleService.findById(id); if (article.getStatus().equals(Article.Status.PUBLISHED.getCode())) { if (article.getSid() != null) { log.info(\"{}: -&gt;Article[{}] auto deploy AllSubject[{}]... \", id, signature.getName(), article.getSubject().getSubjectTitle()); deployService.deployAllSubjectArticle(article.getSubject().getId()); } else { log.info(\"{}: -&gt;Article[{}] auto deploy deployAllSingleArticle... \", id, signature.getName()); deployService.deployAllSingleArticle(); } } } @Around(\"insertNodeAsChild()\") public Object autoDeployAfterInsertNode(ProceedingJoinPoint point) throws Throwable { Integer articleId = (Integer) point.getArgs()[0]; Integer targetId = (Integer) point.getArgs()[1]; boolean isSubject = (boolean) point.getArgs()[2]; Article article = articleService.findById(articleId);//执行前获取参数 Object object = point.proceed(point.getArgs());//执行 //非发布状态直接返回 if (article.getStatus().compareTo(Article.Status.PUBLISHED.getCode()) &lt; 0) return object; //有所属主题则重新发布该主题,否则重新发布单体文章列表 if (article.getSid() != null) { deployService.deployAllSubjectArticle(article.getSid()); } else { deployService.deployAllSingleArticle(); } //获取移动目标的主题 Integer targetSid; if (isSubject) { targetSid = targetId; } else { Article target = articleService.findById(targetId); targetSid = target.getSid(); } //如果主题不同,则重发布目标主题 if (!targetSid.equals(article.getSid())) { deployService.deployAllSubjectArticle(targetSid); } return object; } }"
}, {
  "id" : 105,
  "url" : "/subject/springboot/springjpa/index.html",
  "subject" : "SpringBoot",
  "title" : "Spring Data JPA",
  "content" : "Spring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA-based (Java Persistence API) repositories. It makes it easier to build Spring-powered applications that use data access technologies.Implementing a data access layer for an application can be quite cumbersome. Too much boilerplate code has to be written to execute the simplest queries. Add things like pagination, auditing, and other often-needed options, and you end up lost.Spring Data JPA aims to significantly improve the implementation of data access layers by reducing the effort to the amount that’s actually needed. As a developer you write your repository interfaces using any number of techniques, and Spring will wire it up for you automatically. You can even use custom finders or query by example and Spring will write the query for you!Support Policy and MigrationFor information about minimum requirements, guidance on upgrading from earlier versions and support policies, please check out&nbsp;the official Spring Data release train wiki page.Also check out the&nbsp;supported versions of Spring Data JPA in relation to Spring Boot.FeaturesfadfasdGetting Started: Sophisticated support to build repositories based on Spring and JPAVarious Query Methods: Pagination support, dynamic query execution, ability to integrate custom data access codeValidation of&nbsp;@Query&nbsp;annotated queries at bootstrap timeSupport for&nbsp;Querydsl&nbsp;predicates and type-safe JPA queriesAuditing: Transparent auditing of domain classConfiguration: Modern configuration using annotations as well as legacy support for XML-based systems."
}, {
  "id" : 123,
  "url" : "/subject/springboot/mongo/index.html",
  "subject" : "SpringBoot",
  "title" : "Spring mongo",
  "content" : "DescriptionThe&nbsp;parseInt&nbsp;function&nbsp;converts its first argument to a string, parses that string, then returns an integer or&nbsp;NaN.If not&nbsp;NaN, the return value will be the integer that is the first argument taken as a number in the specified&nbsp;radix. (For example, a&nbsp;radix&nbsp;of&nbsp;10&nbsp;converts from a decimal number,&nbsp;8&nbsp;converts from octal,&nbsp;16&nbsp;from hexadecimal, and so on.)The&nbsp;radix&nbsp;argument is&nbsp;converted to a number. If it's unprovided, or if the value becomes 0,&nbsp;NaN&nbsp;or&nbsp;Infinity&nbsp;(undefined&nbsp;is coerced to&nbsp;NaN), JavaScript assumes the following:If the input&nbsp;string, with leading whitespace and possible&nbsp;+/-&nbsp;signs removed, begins with&nbsp;0x&nbsp;or&nbsp;0X&nbsp;(a zero, followed by lowercase or uppercase X),&nbsp;radix&nbsp;is assumed to be&nbsp;16&nbsp;and the rest of the string is parsed as a hexadecimal number.If the input&nbsp;string&nbsp;begins with any other value, the radix is&nbsp;10&nbsp;(decimal).Note:&nbsp;Other prefixes like&nbsp;0b, which are valid in&nbsp;number literals, are treated as normal digits by&nbsp;parseInt().&nbsp;parseInt()&nbsp;does&nbsp;not&nbsp;treat strings beginning with a&nbsp;0&nbsp;character as octal values either. The only prefix that&nbsp;parseInt()&nbsp;recognizes is&nbsp;0x&nbsp;or&nbsp;0X&nbsp;for hexadecimal values — everything else is parsed as a decimal value if&nbsp;radix&nbsp;is missing.&nbsp;Number()&nbsp;or&nbsp;BigInt()&nbsp;can be used instead to parse these prefixes.If the radix is&nbsp;16,&nbsp;parseInt()&nbsp;allows the string to be optionally prefixed by&nbsp;0x&nbsp;or&nbsp;0X&nbsp;after the optional sign character (+/-).If the radix value (coerced if necessary) is not in range [2, 36] (inclusive)&nbsp;parseInt&nbsp;returns&nbsp;NaN.For radices above&nbsp;10, letters of the English alphabet indicate numerals greater than&nbsp;9. For example, for hexadecimal numbers (base&nbsp;16),&nbsp;A&nbsp;through&nbsp;F&nbsp;are used. The letters are case-insensitive.parseInt&nbsp;understands exactly two signs:&nbsp;+&nbsp;for positive, and&nbsp;-&nbsp;for negative. It is done as an initial step in the parsing after whitespace is removed. If no signs are found, the algorithm moves to the following step; otherwise, it removes the sign and runs the number-parsing on the rest of the string.If&nbsp;parseInt&nbsp;encounters a character that is not a numeral in the specified&nbsp;radix, it ignores it and all succeeding characters and returns the integer value parsed up to that point. For example, although&nbsp;1e3&nbsp;technically encodes an integer (and will be correctly parsed to the integer&nbsp;1000&nbsp;by&nbsp;parseFloat()),&nbsp;parseInt(\"1e3\", 10)&nbsp;returns&nbsp;1, because&nbsp;e&nbsp;is not a valid numeral in base 10. Because&nbsp;.&nbsp;is not a numeral either, the return value will always be an integer.If the first character cannot be converted to a number with the radix in use,&nbsp;parseInt&nbsp;returns&nbsp;NaN. Leading whitespace is allowed.For arithmetic purposes, the&nbsp;NaN&nbsp;value is not a number in any radix. You can call the&nbsp;Number.isNaN&nbsp;function to determine if the result of&nbsp;parseInt&nbsp;is&nbsp;NaN. If&nbsp;NaN&nbsp;is passed on to arithmetic operations, the operation result will also be&nbsp;NaN.Because large numbers use the&nbsp;e&nbsp;character in their string representation (e.g.&nbsp;6.022e23&nbsp;for 6.022 × 1023), using&nbsp;parseInt&nbsp;to truncate numbers will produce unexpected results when used on very large or very small numbers.&nbsp;parseInt&nbsp;should&nbsp;not&nbsp;be used as a substitute for&nbsp;Math.trunc().To convert a number to its string literal in a particular radix, use&nbsp;thatNumber.toString(radix).Because&nbsp;parseInt()&nbsp;returns a number, it may suffer from loss of precision if the integer represented by the string is&nbsp;outside the safe range. The&nbsp;BigInt()&nbsp;function supports parsing integers of arbitrary length accurately, by returning a&nbsp;BigInt."
}, {
  "id" : 131,
  "url" : "/subject/springboot/spring-redis/index.html",
  "subject" : "SpringBoot",
  "title" : "Spring Redis",
  "content" : "Redis&nbsp;是一款开源的，使用 C 开发的高性能内存 Key/Value 数据库，支持 String、Set、Hash、List、Stream 等等数据类型。它被广泛用于缓存、消息队列、实时分析、计数器和排行榜等场景。基本上是当代应用中必不可少的软件！Spring Boot 对 Redis 提供了开箱即用的组件：spring-boot-starter-data-redis。通过这个 starter，我们只需要几行简单的配置就可以快速地在 Spring Boot 中整合、使用 Redis。除了&nbsp;spring-boot-starter-data-redis&nbsp;外，还添加了&nbsp;commons-pool2&nbsp;依赖，是因为我们需要使用到连接池。配置属性只需要在&nbsp;application.yaml | properties&nbsp;中配置如下常用的基本属性即可注意，如果你使用的是 spring boot 2.x，上述配置的命名空间应该是&nbsp;spring.redis&nbsp;而不是&nbsp;spring.data.redis。更多完整的配置属性，请参阅&nbsp;官方文档。使用 Jedis 客户端Spring Data Redis 默认使用&nbsp;Lettuce&nbsp;作为 Redis 客户端。官方还对&nbsp;Jedis&nbsp;提供了支持，你可以根据你的喜好进行选择。要替换为 Jedis，首先需要从&nbsp;spring-boot-starter-data-redis&nbsp;排除&nbsp;lettuce&nbsp;，并且添加&nbsp;jedis&nbsp;依赖"
}, {
  "id" : 122,
  "url" : "/articles/qiwen2/index.html",
  "subject" : "点滴文章",
  "title" : "单位来了一位美国访问学者",
  "content" : "单位来了一位美国访问学者，闲谈中他说他们学院有两个华裔禽兽，过去十几年来，一个做了中国的千人学者（经中央党校培训一周后上岗，自动给中国绿卡），另一个做了中国的（李嘉诚）长江教授。发表论文中美两边地址都写，基金两边申请，工资两边都拿，内外通吃，如鱼得水，滋润得很。四年前被查（FBI到家里搜查，铐走），涉及往中国转移美国的知识产权，其中甚至有军工内容。一个开除，一个坐牢，都被税务部门罚款了。"
}, {
  "id" : 124,
  "url" : "/subject/springboot/gatewaay/index.html",
  "subject" : "SpringBoot",
  "title" : "Spring 网关",
  "content" : "1.网关介绍如果没有网关，难道不行吗？功能上是可以的，我们直接调用提供的接口就可以了。那为什么还需要网关？因为网关的作用不仅仅是转发请求而已。我们可以试想一下，如果需要做一个请求认证功能，我们可以接入到 API 服务中。但是倘若后续又有服务需要接入，我们又需要重复接入。这样我们不仅代码要重复编写，而且后期也不利于维护。由于接入网关后，网关将转发请求。所以在这一层做请求认证，天然合适。这样这需要编写一次代码，在这一层过滤完毕，再转发给下面的 API。所以 API 网关的通常作用是完成一些通用的功能，如请求认证，请求记录，请求限流，黑白名单判断等。API网关是一个服务器，是系统的唯一入口。API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关提供REST/HTTP的访问API。2.Spring Cloud Gateway介绍Spring Cloud Gateway是Spring Cloud的新一代API网关，基于WebFlux框架实现，它旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系统中的网关，目标是替代Netflix ZUUL，具有更好的性能、更强的扩展性、以及更丰富的功能特性，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如:安全，监控/埋点，限流等。3.Spring Cloud Gateway的特性基于Spring Framework 5， Project Reactor和Spring Boot 2.0动态路由：能够匹配任何请求属性可以对路由指定 Predicate 和 Filter集成Hystrix断路器集成Spring Cloud DiscoveryClient 服务发现功能易于编写的Predicate和Filter请求限流支持路径重写4.Spring Cloud Gateway的三大核心概念路由(Route)：&nbsp;路由是网关最基础的部分，路由信息由一个ID，一个目标URI，一组断言和过滤器组成。路由断言Predicate用于匹配请求，过滤器Filter用于修改请求和响应。如果断言为true，则说明请求URI和配置匹配，则执行路由。spring: cloud: gateway: # 定义多个路由 routes: # 一个路由route的id - id: path_route # 该路由转发的目标URI uri: https://example.org # 路由条件集合 predicates: - Path=/test/** # 过滤器集合 filters: - AddRequestHeader=X-Request-Id, 1024 - AddRequestParameter=color, red断言(Predicate)：&nbsp;参考Java8中的断言Predicate，用于实现请求匹配逻辑，例如匹配路径、请求头、请求参数等。请求与断言匹配则执行该路由。过滤器(Filter)：&nbsp;指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前后对请求进行修改。5.Gateway工作流程客户端向Spring Cloud Gateway发出请求，然后在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway Web Handler。Handler再通过指定的过滤器链来对请求进行过滤处理，最后发送到我们实际的服务执行业务逻辑，然后返回。过滤器链被虚线分隔，是因为过滤器既可以在转发请求前拦截请求，也可以在请求处理之后对响应进行拦截处理。推荐一个开源免费的 Spring Boot 实战项目："
}, {
  "id" : 102,
  "url" : "/subject/springboot/springdata/index.html",
  "subject" : "SpringBoot",
  "title" : "Spring Data",
  "content" : "The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.A key element of Spring is infrastructural support at the application level: Spring focuses on the \"plumbing\" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.Support Policy and MigrationFor information about minimum requirements, guidance on upgrading from earlier versions and support policies, please check out&nbsp;the official Spring Framework wiki pageFeaturesCore technologies: dependency injection, events, resources, i18n, validation, data binding, type conversion, SpEL, AOP.Testing: mock objects, TestContext framework, Spring MVC Test,&nbsp;WebTestClient.Data Access: transactions, DAO support, JDBC, ORM, Marshalling XML.Spring MVC&nbsp;and&nbsp;Spring WebFlux&nbsp;web frameworks.Integration: remoting, JMS, JCA, JMX, email, tasks, scheduling, cache and observability.Languages: Kotlin, Groovy, dynamic languages."
}, {
  "id" : 109,
  "url" : "/subject/java/javasyntax/index.html",
  "subject" : "Java",
  "title" : "Java Syntax",
  "content" : "Example explainedEvery line of code that runs in Java must be inside a&nbsp;class. And the class name should always start with an uppercase first letter. In our example, we named the class&nbsp;Main.Note:&nbsp;Java is case-sensitive: \"MyClass\" and \"myclass\" has different meaning.The name of the java file&nbsp;must match&nbsp;the class name. When saving the file, save it using the class name and add \".java\" to the end of the filename. To run the example above on your computer, make sure that Java is properly installed: Go to the&nbsp;Get Started Chapter&nbsp;for how to install Java. The output should be:Hello WorldThe main MethodThe&nbsp;main()&nbsp;method is required and you will see it in every Java program:public static void main(String[] args)Any code inside the&nbsp;main()&nbsp;method will be executed. Don't worry about the keywords before and after it. You will get to know them bit by bit while reading this tutorial.For now, just remember that every Java program has a&nbsp;class&nbsp;name which must match the filename, and that every program must contain the&nbsp;main()&nbsp;method.System.out.println()Inside the&nbsp;main()&nbsp;method, we can use the&nbsp;println()&nbsp;method to print a line of text to the screen:"
}, {
  "id" : 106,
  "url" : "/subject/springboot/security/index.html",
  "subject" : "SpringBoot",
  "title" : "Spring Security",
  "content" : "Spring Security KerberosSpring Security KerberosSpring Security KerberosSpring Security KerberosSpring Security KerberosSpring Security KerberosSpring Security Kerberos"
}, {
  "id" : 110,
  "url" : "/subject/java/outputprint22/index.html",
  "subject" : "Java",
  "title" : "Java Output / Print2",
  "content" : "Print TextYou learned from the previous chapter that you can use the&nbsp;println()&nbsp;method to output values or print text in Java:ExampleGet your own Java ServerSystem.out.println(\"Hello World!\");Try it Yourself »You can add as many&nbsp;println()&nbsp;methods as you want. Note that it will add a new line for each method:ExampleSystem.out.println(\"Hello World!\"); System.out.println(\"I am learning Java.\"); System.out.println(\"It is awesome!\");Try it Yourself »Double QuotesText must be wrapped inside double quotations marks&nbsp;\"\".If you forget the double quotes, an error occurs:ExampleSystem.out.println(\"This sentence will work!\");System.out.println(This sentence will produce an error);Try it Yourself »The Print() MethodThere is also a&nbsp;print()&nbsp;method, which is similar to&nbsp;println().The only difference is that it does not insert a new line at the end of the output:ExampleSystem.out.print(\"Hello World! \"); System.out.print(\"I will print on the same line.\");Try it Yourself »Note that we add an extra space (after \"Hello World!\" in the example above) for better readability.In this tutorial, we will only use&nbsp;println()&nbsp;as it makes the code output easier to read."
}, {
  "id" : 104,
  "url" : "/subject/springboot/springjdbc/index.html",
  "subject" : "SpringBoot",
  "title" : "Spring Data JDBC",
  "content" : "Spring Data JDBC, part of the larger Spring Data family, makes it easy to implement JDBC based repositories. This module deals with enhanced support for JDBC based data access layers. It makes it easier to build Spring powered applications that use data access technologies.FeaturesBased on the aggregate abstractionAnnotation based entity mappingImmutable entitiesQuery derivationCustom queries via&nbsp;@Query&nbsp;annotationsMyBatis integrationLifecycle callbacksAuditingmodified_undeploy"
}, {
  "id" : 136,
  "url" : "/subject/springboot/spring-logbak3/index.html",
  "subject" : "SpringBoot",
  "title" : "SpringBoot3 整合 Logback 日志框架3",
  "content" : "                   ${log.console.pattern} UTF-8    DEBUG     ${file.path}/${file.name.info.prefix}.${file.name.info.suffix}  ${log.file.pattern} UTF-8    ${file.path}/${file.name.info.prefix}.%d{yyyy-MM-dd}.%i.${file.name.info.suffix} 2MB 3 10MB    INFO     ${file.path}/${file.name.error.prefix}.${file.name.error.suffix}  ${log.file.pattern} UTF-8    ${file.path}/${file.name.error.prefix}.%d{yyyy-MM-dd}.%i.${file.name.error.suffix} 2MB 3 10MB    ERROR ACCEPT DENY             "
}, {
  "id" : 108,
  "url" : "/subject/java/javatutorial/index.html",
  "subject" : "Java",
  "title" : "Java Tutorial",
  "content" : "Java QuizTest your Java skills with a quiz.Start Java QuizLearn by ExamplesLearn by examples! This tutorial supplements all explanations with clarifying examples.See All Java ExamplesMy LearningTrack your progress with the free \"My Learning\" program here at W3Schools.Log in to your account, and start earning points!This is an optional feature. You can study at W3Schools without using My Learning."
}, {
  "id" : 138,
  "url" : "/articles/spring-logbak10/index.html",
  "subject" : "点滴文章",
  "title" : "SpringBoot3 整合 Logback 日志框架1",
  "content" : "safdadsfaadsfas                   ${log.console.pattern} UTF-8    DEBUG     ${file.path}/${file.name.info.prefix}.${file.name.info.suffix}  ${log.file.pattern} UTF-8    ${file.path}/${file.name.info.prefix}.%d{yyyy-MM-dd}.%i.${file.name.info.suffix} 2MB 3 10MB    INFO     ${file.path}/${file.name.error.prefix}.${file.name.error.suffix}  ${log.file.pattern} UTF-8    ${file.path}/${file.name.error.prefix}.%d{yyyy-MM-dd}.%i.${file.name.error.suffix} 2MB 3 10MB    ERROR ACCEPT DENY             "
}, {
  "id" : 103,
  "url" : "/subject/springboot/springcloud/index.html",
  "subject" : "SpringBoot",
  "title" : "Spring Cloud",
  "content" : "Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, short lived microservices and contract testing). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.FeaturesSpring Cloud focuses on providing good out of box experience for typical use cases and extensibility mechanism to cover others.Distributed/versioned configurationService registration and discoveryRoutingService-to-service callsLoad balancingCircuit BreakersDistributed messagingShort lived microservices (tasks)Consumer-driven and producer-driven contract testingTalks and videosDistributed Applications with Spring Cloud: Spring Office HoursBeginner’s Guide To Spring CloudGetting StartedGenerating A New Spring Cloud ProjectThe easiest way to get started is visit&nbsp;start.spring.io, select your Spring Boot version and the Spring Cloud projects you want to use. This will add the corresponding Spring Cloud BOM version to your Maven/Gradle file when you generate the project.Adding Spring Cloud To An Existing Spring Boot ApplicationIf you an existing Spring Boot app you want to add Spring Cloud to that app, the first step is to determine the version of Spring Cloud you should use. The version you use in your app will depend on the version of Spring Boot you are using.The table below outlines which version of Spring Cloud maps to which version of Spring Boot.Table 1. Release train Spring Boot compatibility (see&nbsp;here&nbsp;for more detailed information).Release TrainSpring Boot Generation2023.0.x&nbsp;aka Leyton3.3.x, 3.2.x2022.0.x&nbsp;aka Kilburn3.0.x, 3.1.x (Starting with 2022.0.3)2021.0.x&nbsp;aka Jubilee2.6.x, 2.7.x (Starting with 2021.0.3)2020.0.x&nbsp;aka Ilford2.4.x, 2.5.x (Starting with 2020.0.3)Hoxton2.2.x, 2.3.x (Starting with SR5)Greenwich2.1.xFinchley2.0.xEdgware1.5.xDalston1.5.xSpring Cloud Dalston, Edgware, Finchley, Greenwich, 2020.0 (aka Ilford), 2021.0 (aka Jubilee), and 2022.0 (aka Kilburn) have all reached end of life status and are no longer supported.Bug fixes and backwards compatible features are added to each release train via a service release (SR). Once you determine which version of Spring Cloud to use, you should use the latest service release for that release train. You can find the latest service release information on our&nbsp;release notes page.Now that you know which release train to use and the latest service release for that release train you are ready to add the Spring Cloud BOM to your application."
}, {
  "id" : 107,
  "url" : "/subject/springboot/springsecurity/index.html",
  "subject" : "SpringBoot",
  "title" : "Spring Security Kerberos",
  "content" : "Spring Security KerberosSpring Security KerberosSpring Security KerberosSpring Security KerberosSpring Security KerberosSpring Security KerberosSpring Security Kerberos"
}, {
  "id" : 139,
  "url" : "/articles/tests1/index.html",
  "subject" : "点滴文章",
  "title" : "标题测试1",
  "content" : "标题测试1标题测试1标题测试1标题测试1标题测试1标题测试1标题测试1标题测试1标题测试1标题测试1标题测试1标题测试1"
}, {
  "id" : 113,
  "url" : "/subject/java/javadatatype/index.html",
  "subject" : "Java",
  "title" : "Java Data Types",
  "content" : "Print NumbersYou can also use the&nbsp;println()&nbsp;method to print numbers.However, unlike text, we don't put numbers inside double quotes:"
}, {
  "id" : 140,
  "url" : "/subject/java/tesst2/index.html",
  "subject" : "Java",
  "title" : "标题测试2",
  "content" : "test标题测试2标题测试2标题测试2标题测试2标题测试2"
}, {
  "id" : 121,
  "url" : "/articles/qiwen1/index.html",
  "subject" : "点滴文章",
  "title" : "厦门文化执法支队正科级干部钟劭臻婚内出轨11年",
  "content" : "2024年10月24报道，近日，厦门文化执法支队正科级干部钟劭臻婚内出轨11年，与小三结婚后被小四税务女网红的叶曼娜曝光！吃瓜内容比价多，我就不一一捋了，大家自己看吧！ 一共五楼，最后有惊喜"
}, {
  "id" : 101,
  "url" : "/subject/springboot/asdfasdfasdfsddddd/index.html",
  "subject" : "SpringBoot",
  "title" : "Spring Framework",
  "content" : "The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.A key element of Spring is infrastructural support at the application level: Spring focuses on the \"plumbing\" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.Support Policy and MigrationFor information about minimum requirements, guidance on upgrading from earlier versions and support policies, please check out&nbsp;the official Spring Framework wiki pageFeaturesCore technologies: dependency injection, events, resources, i18n, validation, data binding, type conversion, SpEL, AOP.Testing: mock objects, TestContext framework, Spring MVC Test,&nbsp;WebTestClient.Data Access: transactions, DAO support, JDBC, ORM, Marshalling XML.Spring MVC&nbsp;and&nbsp;Spring WebFlux&nbsp;web frameworks.Integration: remoting, JMS, JCA, JMX, email, tasks, scheduling, cache and observability.Languages: Kotlin, Groovy, dynamic languages."
}, {
  "id" : 137,
  "url" : "/articles/spring-logbak2/index.html",
  "subject" : "点滴文章",
  "title" : "SpringBoot3 整合 Logback 日志框架2",
  "content" : "                   ${log.console.pattern} UTF-8    DEBUG     ${file.path}/${file.name.info.prefix}.${file.name.info.suffix}  ${log.file.pattern} UTF-8    ${file.path}/${file.name.info.prefix}.%d{yyyy-MM-dd}.%i.${file.name.info.suffix} 2MB 3 10MB    INFO     ${file.path}/${file.name.error.prefix}.${file.name.error.suffix}  ${log.file.pattern} UTF-8    ${file.path}/${file.name.error.prefix}.%d{yyyy-MM-dd}.%i.${file.name.error.suffix} 2MB 3 10MB    ERROR ACCEPT DENY             "
}]